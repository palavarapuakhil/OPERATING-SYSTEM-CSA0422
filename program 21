#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5
#define THINKING 0
#define HUNGRY 1
#define EATING 2
#define LEFT (philosopher_num + 4) % NUM_PHILOSOPHERS
#define RIGHT (philosopher_num + 1) % NUM_PHILOSOPHERS

int state[NUM_PHILOSOPHERS];
pthread_mutex_t mutex;
pthread_cond_t condition[NUM_PHILOSOPHERS];

void *philosopher(void *arg) {
    int philosopher_num = *(int *)arg;
    printf("Philosopher %d is thinking.\n", philosopher_num);

    while (1) {
        sleep(1);
        pickup_forks(philosopher_num);
        sleep(1);
        putdown_forks(philosopher_num);
    }
}

void pickup_forks(int philosopher_num) {
    pthread_mutex_lock(&mutex);
    state[philosopher_num] = HUNGRY;
    printf("Philosopher %d is hungry.\n", philosopher_num);
    test(philosopher_num);
    while (state[philosopher_num] != EATING)
        pthread_cond_wait(&condition[philosopher_num], &mutex);
    pthread_mutex_unlock(&mutex);
}

void putdown_forks(int philosopher_num) {
    pthread_mutex_lock(&mutex);
    state[philosopher_num] = THINKING;
    printf("Philosopher %d is thinking.\n", philosopher_num);
    test(LEFT);
    test(RIGHT);
    pthread_mutex_unlock(&mutex);
}

void test(int philosopher_num) {
    if (state[philosopher_num] == HUNGRY && state[LEFT] != EATING && state[RIGHT] != EATING) {
        state[philosopher_num] = EATING;
        printf("Philosopher %d is eating.\n", philosopher_num);
        pthread_cond_signal(&condition[philosopher_num]);
    }
}

int main() {
    pthread_t philosophers[NUM_PHILOSOPHERS];
    int philosopher_nums[NUM_PHILOSOPHERS];

    pthread_mutex_init(&mutex, NULL);

    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_cond_init(&condition[i], NULL);
        philosopher_nums[i] = i;
    }

    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_create(&philosophers[i], NULL, philosopher, (void *)&philosopher_nums[i]);
    }

    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(philosophers[i], NULL);
    }

    pthread_mutex_destroy(&mutex);

    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_cond_destroy(&condition[i]);
    }

    return 0;
}

