class Process:
    def __init__(self, pid, arrival_time, burst_time):
        self.pid = pid
        self.arrival_time = arrival_time
        self.burst_time = burst_time
        self.remaining_time = burst_time
        self.start_time = None
        self.completion_time = None
        self.waiting_time = 0
        self.turnaround_time = 0

    def __lt__(self, other):
        return self.remaining_time < other.remaining_time

def compute_average_times(processes):
    time = 0
    n = len(processes)
    completed = 0
    ready_queue = []
    current_process = None
    avg_waiting_time = 0
    avg_turnaround_time = 0

    while completed < n:
        for process in processes:
            if process.arrival_time == time:
                ready_queue.append(process)

        if current_process is not None and current_process.remaining_time == 0:
            current_process.completion_time = time
            current_process.turnaround_time = current_process.completion_time - current_process.arrival_time
            current_process.waiting_time = current_process.turnaround_time - current_process.burst_time
            avg_waiting_time += current_process.waiting_time
            avg_turnaround_time += current_process.turnaround_time
            completed += 1
            current_process = None

        if current_process is None and len(ready_queue) > 0:
            ready_queue.sort()
            current_process = ready_queue.pop(0)
            current_process.start_time = time

        if current_process is not None:
            current_process.remaining_time -= 1

        time += 1

    avg_waiting_time /= n
    avg_turnaround_time /= n

    return avg_waiting_time, avg_turnaround_time

if __name__ == '__main__':
    processes = [
        Process('P1', 0, 5),
        Process('P2', 1, 3),
        Process('P3', 2, 3),
        Process('P4', 4, 1),
    ]
    avg_waiting_time, avg_turnaround_time = compute_average_times(processes)
    print(f"Average waiting time: {avg_waiting_time:.2f} ms")
    print(f"Average turnaround time: {avg_turnaround_time:.2f} ms")
